@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section head {
    <title>部门管理</title>
}
<el-container style="height:100vh;overflow: hidden;">
    <el-main>

        <el-form label-width="100px" :inline="true">
            <div>
                <el-form-item label="部门名称" prop="desc" style="margin-bottom:5px;">
                    <el-input v-model="state.qry.name" placeholder="部门名称" clearable></el-input>
                </el-form-item>
                <el-form-item label="状态" prop="desc" style="margin-bottom:5px;">
                    <el-select v-model="state.qry.status" placeholder="不限" clearable style="width:200px">
                        <el-option label="是" value="1"></el-option>
                        <el-option label="否" value="2"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item prop="desc" style="margin-bottom:5px;">
                    <el-button type="primary" v-on:click="pageIndex=1;loadData()" id="query">查询</el-button>
                    <el-button v-on:click="resetQueryForm">重置</el-button>
                </el-form-item>
            </div>
        </el-form>
          <el-form label-width="100px" :inline="true" style="margin-top:30px;"><div></div> </el-form>
 
        <el-table :data="state.dataList"
                  border
                  height="100%"
                  v-loading="state.dataloading">
            <el-table-column label="#" width="60" align="center">
                <template #default="scope">
                    <div style="text-align:left">
                        <span>{{ (state.qry.pageIndex) * state.qry.pageSize + scope.$index +1   }}</span>
                    </div>
                </template>
            </el-table-column>
            <el-table-column label="部门名称" width="auto" max-width="200" align="left" show-overflow-tooltip="true">
                <template #default="scope">
                    {{ scope.row.deptName }}
                </template>
            </el-table-column>
            <el-table-column label="公司名称" width="auto" max-width="200" align="left" show-overflow-tooltip="true">
                <template #default="scope">
                    {{ scope.row.companyName }}
                </template>
            </el-table-column>
            <el-table-column label="状态" width="60px" align="center">
                <template #default="scope">
                    <div style="text-align:center">
                        <span>{{  scope.row.statusName }}</span>
                    </div>
                </template>
            </el-table-column>
            <el-table-column label="创建日期" width="160px" align="center">
                <template #default="scope">
                    <div style="text-align:right">
                        <p style="margin:0px;text-align:center">{{ scope.row.createTime}}</p>
                    </div>
                </template>
            </el-table-column>
            <el-table-column label="操作" prop="opt" width="260px" align="center">
                <template #default="scope">
                    <div style="text-align:center">
                        
                        <el-button size="small" v-on:click="AddDept(scope.row)"  v-if="scope.row.parentDeptId==-1">添加子级部门</el-button>
                        <el-button size="small" v-on:click="EditDept(scope.row)">编辑</el-button>
                        <el-button size="small" type="danger" v-on:click="deleteItem(scope.row.deptId)" v-if="scope.row.parentDeptId!=-1">删除 </el-button>
                    </div>
                </template>
            </el-table-column>

        </el-table>
        <div style=" height:35px;padding: 10px 0px 0px 20px; ">
            <el-pagination v-model:current-page="state.qry.pageIndex"
                           v-model:page-size="state.qry.pageSize"
                           :page-sizes="[20, 50, 100,500]"
                           layout="total, sizes, prev, pager, next, jumper"
                           :total="state.qry.totalCount"
                           v-on:size-change="handleSizeChange"
                           v-on:current-change="handleCurrentChange" style="float:right;"></el-pagination>

        </div>
    </el-main>
</el-container>


@section scripts {
    <script type="text/javascript">
        const app = Vue.createApp({
        setup() {
      
           const state = Vue.reactive({
                dataLoading: false,
                qry: {
                    name: null,
                    status: null,
                    pageIndex: 0,
                    pageSize: 50,
                    totalCount: 0,
                },
                dataList: []

            });
           Vue.onMounted(() => { loadData()  });
            const loadData = () => {
                state.dataLoading = true;
                axios.post(`/dept/PageList`, {...state.qry}).then(response => {
                    let {data,status}=response;
                    Object.assign(state,
                                {dataList:data.data.list,
                            qry:{
                                    pageIndex:data.data.pageIndex,
                                    pageSize:data.data.pageSize,
                                    totalCount:data.data.total,
                                    name:state.qry.name,
                                    status:state.qry.status
                                }
                    });
                })
                state.dataLoading = false;
                };
            const handleSizeChange = (val) => {
                    state.qry.pageIndex = 1;
                    state.qry.pageSize = val;
                    loadData();
                        };
            const handleCurrentChange = (val) => {
                        state.qry.pageIndex = val;
                        loadData();
                    };
            const deleteItem =  (id) => {

              ElMessageBox.confirm('您确定删除吗?', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning', })
              .then(() => {
                    state.dataLoading = true;
                     axios.delete(`/Dept/${id}/delete`)
                    .then(response => {
                        let {data,status}=response;
                        if (status == 200&&data.isSuccess ){
                            ElMessage({ message: `删除成功!`,  type: `success` });
                             loadData();
                            return;
                        }
                        ElMessage.error(data.message);
                    })
                    state.dataLoading = false;
                    })
                    .catch(() => { console.log('取消删除'); });
              }
            //重置查询表单
            const resetQueryForm=()=>{
                 state.qry  = {...state.qry,   name: null, status: null };
                };
            const AddDept = (row) => {
                    layui.use(function () {
                        var layer = layui.layer;
                        layer.open({
                            type: 2,
                            area: ['600px', '270px'],
                            title: `新增【${row.deptName}】子级部门`,
                            fix: true,
                            maxmin: false,
                            shade: 0.6, //遮罩透明度
                            shadeClose: false,//点击遮罩关闭
                            anim: 0,
                            content: `Dept/AddOrEditDept?parentDeptId=${row.deptId}&companyId=${row.companyId}`,
                            resize:false
                        });
                    });
                }
            const EditDept = (row) => {
                    layui.use(function () {
                        var layer = layui.layer;
                        layer.open({
                            type: 2,
                            area: ['600px', '270px'],
                            title: `编辑【${row.deptName}】`,
                            fix: true,
                            maxmin: false,
                            shade: 0.6, //遮罩透明度
                            shadeClose: false,//点击遮罩关闭
                            anim: 0,
                            content: `Dept/AddOrEditDept?id=${row.deptId}`,
                            resize:false
                        });
                    });
                }

            return {state,loadData,handleSizeChange,handleCurrentChange,deleteItem,resetQueryForm,AddDept,EditDept};
                }
            });
            app.use(ElementPlus,{ locale: ElementPlusLocaleZhCn });
            app.mount('#app');
    </script>

}