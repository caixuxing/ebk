@inject IHostEnvironment env
@inject  YueJia.Ebk.Application.Contracts.SysUserApp.ICurrentUserApp currentUser


@section head {
    <title>Ebk后台管理  @string.Format("{0}",$"-【{ env.EnvironmentName}】") </title>
    <style>
                body {
                    font-size: 14px;
                    line-height: 1.42857143;
                    color: #333;
                    margin: 0px;
                    overflow: hidden;
                 font-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Arial,sans-serif !important;
                }

                [v-cloak] {
                    display: none !important;
                }

                    .el-header{

                    --el-header-padding:0 !important;
                }

                .el-footer {
                   line-height: 30px;
                    width: 100%;
                    align-items: center;
                    text-align:center;
                    --el-footer-height:30px !important;
                }

                .userInfo > span {
                    margin-left: 5px;
                    margin-right: 5px;
                }

                .el-menu {
                    border-right: none !important;
                    background-color:#303b57 !important;
                }

               .el-aside ul * {
               color: #fff;
               }
                .el-menu-item.is-active{

                    color: #fff !important;
            background: #1a2031;
            font-weight: 700;
                }

                .el-menu-item:hover {

                     color: #fff;
            background-color: #28324b;
                }

                .el-tabs {
                    overflow: hidden;
                    height: 100%;
                    width: 100%;
                }

                .el-tabs__header {
                    margin: 0px !important;
                }

                .el-tab-paness {
                    display: inline-flex;
                    flex-grow: 1;
                    flex-direction: column;
                    /*  border: #ebeef5 1px solid !important; */
                    overflow: auto;
                    height: 100%;
                    width: 100%;
                    /* padding: 10px !important; */
                    margin: 0px;
                    border: none;
                }
                    .el-select__wrapper {
          border-color: #DCDFE6  !important;
          box-shadow: none !important;
        }

    </style>
}
<el-container style="height:100vh;overflow: hidden;">
    <el-header style="border-bottom: #ebeef5 1px solid;">
        <el-row style="line-height:60px">
            <div style=" background:#72cfb8;width: 199px;text-align: center;font-weight: 700;">
                <a href="/Main/Index" style="display: flex;justify-content: center;line-height: 60px; flex-direction:column; color: #fff; text-decoration: none;">
                    <h1 class="ws-logo-title" style="display:flex;line-height:35px;margin:0px auto 0px">@currentUser.UserName </h1>
                    <div class="ws-logo-subtitle" style="line-height:10px">Ebk后台管理</div>
                </a>
            </div>
            <div>
                <h1 style="margin: auto;font-size: 20px;margin-left: 20px;font-weight: 400;">{{state.activeTitle}}</h1>
            </div>
            <div style="display:flex;justify-content: flex-end; margin-left:auto;margin-right:20px;">
             @*    <el-text>
                    <el-select v-model="state.selectlanguageValue" v-on:change="handleSelectChange" style="width:100px">
                        <el-option v-for="item in state.languageMap" :key="item.Value" :label="item.Text" :value="item.Value" />
                    </el-select>
                </el-text> *@
                <el-text style="margin-right:15px">修改密码</el-text>
                <el-text v-on:click="handleSignOut()">退出登录</el-text>
            </div>
        </el-row>
    </el-header>
    <el-container>
        <el-aside width="200px" style="border: #ebeef5 1px solid; border-top: none;border-bottom: none;border-left:none;background:#303b57">
            <el-menu :default-active="state.activeIndex" v-on:select="handleSelectAddTab"
                     :collapse="isCollapse"
                     open="handleOpen"
                     close="handleClose">
                <template v-for="item in formatMenuMap" :key="state.menuMap.pageIndex">
                    <el-sub-menu v-if="item.children" :index="item.pageIndex">

                        <template #title> <span>{{ item.title }}</span> </template>
                        <template v-for="subMenu in item.children">
                            <el-menu-item :index="subMenu.pageIndex">{{ subMenu.title }}</el-menu-item>
                        </template>
                    </el-sub-menu>
                    <el-menu-item v-else :index="item.pageIndex">{{ item.title }}</el-menu-item>
                </template>
            </el-menu>
        </el-aside>
        <el-container>
            <iframe :src="state.currentIframeUrl" style="width:100%;border:none;height:100%"></iframe>
            <el-footer style="border: #ebeef5 1px solid;">
                <div class="footer-div">
                    <span class="footer-span">&copy; Darcy</span>
                </div>
            </el-footer>
        </el-container>
    </el-container>

</el-container>
@section scripts {
    <script src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js"></script>
    <script src="https://unpkg.com/dayjs@1.8.21/plugin/utc.js"></script>
    <script type="text/javascript">
        const layoutApp = Vue.createApp({
            setup() {
                const state = Vue.reactive({
                    activeIndex: "page1",
                    activeTitle: "首页",
                    currentIframeUrl:"@Url.Action("Index", "Home")",
                    resourcessMenuMap:``,
                    menuMap: [
                        { pageIndex: 'page1', title: '首页', url: "@Url.Action("Index", "Home")" },
                         { pageIndex: "page3", title: "工作台管理", children: [{ pageIndex: 'page3-1', title: '我的代办项', url: "@Url.Action("Index", "Dashboard")" }] },
                  
                          { pageIndex: "page2", title: "系统管理", children: [
                            { pageIndex: 'page2-1', title: '公司管理', url: "@Url.Action("Index", "Company")" },
                            { pageIndex: "page2-2", title: "部门管理", url: "@Url.Action("Index", "Dept")" },
                            { pageIndex: "page2-3", title: "用户管理", url: "@Url.Action("Index", "SysUser")" },
                        ] },
                    ],
                    TabsMap: [
                        {
                            pageIndex: "page1-1",
                            title: "首页",
                            url: "@Url.Action("Index", "Dashboard")",
                        }
                    ],
                    selectlanguageValue :'@Html.Raw(ViewBag.selectlanguageValue)',
                    languageMap:`@Html.Raw(ViewBag.languageMap)`

                });
                const handleSelectAddTab = (targetIndex) => {
                    let rows = flattenTreeIterative(state.menuMap).find(x => x.pageIndex == targetIndex);
                    state.activeIndex = rows.pageIndex;
                    state.activeTitle=rows.title;
                    state.currentIframeUrl=rows.url;
                 
                }
                const handleRemoveTab = (targetIndex) => {
                    const indexToRemove = state.TabsMap.findIndex(item => item.pageIndex === targetIndex);
                    if (indexToRemove !== -1) {
                        state.TabsMap.splice(indexToRemove, 1);
                        const firstObject = state.TabsMap.at(-1);
                         if(targetIndex==state.activeIndex&&firstObject !=undefined){
                             state.activeIndex=firstObject.pageIndex;
                         }
                    }
                }
                const filterMenuArray = (arr, predicate) => {
                    return arr.reduce((acc, menuItem) => {
                        const filteredChildren = menuItem.children
                            ? filterMenuArray(menuItem.children, predicate)
                            : [];
                        if (predicate(menuItem) || filteredChildren.length > 0) {
                            const newMenuItem = { ...menuItem };
                            newMenuItem.children = filteredChildren;
                            acc.push(newMenuItem);
                        }
                        return acc;
                    }, []);
                }
                const flattenTreeIterative=(tree)=> {
                    const stack =[...tree];
                    const flatArray = [];
                    while (stack.length > 0) {
                        const item = stack.pop();
                        if (item.children) {
                            stack.push(...item.children);
                        }
                        flatArray.push(item);
                    }
                    return flatArray;
                }
                const handleSignOut = () => {
                    axios.post(`/main/logout`)
                        .then(response => {
                            if (response.status == 200&&response.data.isSuccess) {
                                 ElMessage({ message: `退出成功!`,  type: `success` });
                                window.location.href = response.data.data;
                                return;
                            }
                          ElMessage.error(response.data.message);
                            
                        })
                };
                const handleSelectChange =  (newValue) => {
                    console.log('选中的值发生变化：', newValue);
                    let url=window.location.href;
                axios.post(`/Language/Set`, new URLSearchParams({
                        culture: newValue,
                        returnUrl: url}),
                        {headers: { 'Content-Type': 'application/x-www-form-urlencoded'}
                    })
                    .then(response => {
                            if (response.status == 200) {
                                 top.location.href = url;
                                //state.ruleForm.platformConfig = response.data.data
                            }
                        });
                };

                const formatMenuMap = Vue.computed(() => {
                  return state.menuMap.map(item => {
                      let newTitel = item.title;
                    return {
                     ...item,
                      title:newTitel,
                    };
                  });
                });
            Vue.onMounted(() => {
				window.onpageshow  = function(event) {
    if (event.persisted)  {
        window.location.reload(); 
    }
};

				});


                return {
                    state,
                    handleSelectAddTab,
                    handleRemoveTab,
                    handleSignOut,
                    handleSelectChange,
                    formatMenuMap
                };
            }
        });
        layoutApp.use(ElementPlus);
        layoutApp.mount('#app');
    </script>
}