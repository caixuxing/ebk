
@using Microsoft.Extensions.Hosting
@inject IHostEnvironment hostEnvironment
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section head {
    <title>公司管理列表</title>
}
<el-container style="height:100vh;overflow: hidden;">
    <el-main>
        <el-form label-width="100px" :inline="true">
            <div>
                <el-form-item label="公司名称" prop="desc" style="margin-bottom:5px;">
                    <el-input v-model="state.qry.name" placeholder="公司名称" clearable></el-input>
                </el-form-item>
                <el-form-item label="责任人" prop="desc" style="margin-bottom:5px;" >
                     <el-input v-model="state.qry.responsible"   placeholder="责任人" clearable></el-input>
                </el-form-item>
              
                 <el-form-item label="状态" prop="desc" style="margin-bottom:5px;">
                      <el-select v-model="state.qry.status" placeholder="不限" clearable style="width:200px" >
                        <el-option label="是" value="1"></el-option>
                        <el-option label="否" value="2"></el-option>
                      </el-select>
                </el-form-item>
                <el-form-item prop="desc" style="margin-bottom:5px;">
                    <el-button type="primary" v-on:click="pageIndex=1;loadData()" id="query">查询</el-button>
                    <el-button v-on:click="resetQueryForm">重置</el-button>
                </el-form-item>
            </div>
        </el-form>
       <el-form label-width="100px" :inline="true" style="margin-top:30px;">
            <div>
                <el-form-item prop="desc" style="margin-bottom:5px;">
                    <el-button type="primary" v-on:click="addDialog()">新增</el-button>
                </el-form-item>
            </div>
        </el-form>
        <el-table :data="state.dataList"
                  border
                  height="100%"
                  v-loading="state.dataloading"
                 >
            <el-table-column label="#" width="60" align="center">
                <template #default="scope">
                    <div style="text-align:left">
                        <span>{{ (state.qry.pageIndex) * state.qry.pageSize + scope.$index +1   }}</span>
                    </div>
                </template>
            </el-table-column>
            <el-table-column label="公司名称" width="auto" max-width="200" align="left" show-overflow-tooltip="true">
                <template #default="scope">
                    {{ scope.row.name }}
                </template>
            </el-table-column>
               <el-table-column label="责任人" width="120px" align="center" show-overflow-tooltip="true">
                <template #default="scope">
                    {{ scope.row.responsible }}
                </template>
            </el-table-column>
               <el-table-column label="联系电话" width="140px" align="center" show-overflow-tooltip="true">
                <template #default="scope" align="right">
                    {{ scope.row.contactPhone }}
                </template>
            </el-table-column>
               <el-table-column label="邮箱" width="auto" max-width="120" align="center" show-overflow-tooltip="true">
                <template #default="scope">
                    {{ scope.row.email }}
                </template>
            </el-table-column>
             <el-table-column label="是否渠道管理" width="115px" align="center" show-overflow-tooltip="true">
                <template #default="scope">
                    {{ scope.row.isChannelManageName }}
                </template>
            </el-table-column>
            <el-table-column label="状态" width="60px" align="center">
                <template #default="scope">
                    <div style="text-align:center">
                        <span>{{  scope.row.statusName }}</span>
                    </div>
                </template>
            </el-table-column>
             <el-table-column label="创建日期" width="160px" align="center">
                <template #default="scope">
                    <div style="text-align:right">
                        <p style="margin:0px;text-align:center">{{ scope.row.createTime}}</p>
                    </div>
                </template>
            </el-table-column>

            <el-table-column label="操作" prop="opt" width="240px" align="center">
                <template #default="scope">
                    <div style="text-align:center">
                        <el-button size="small" v-on:click="add">配置渠道</el-button>
                       <el-button size="small" v-on:click="edit(scope.row)">编辑</el-button>
                       <el-button size="small" type="danger" v-on:click="deleteItem(scope.row.id)">删除 </el-button>
                    </div>
                </template>
            </el-table-column>

        </el-table>
        <div style=" height:35px;padding: 10px 0px 0px 20px; ">
            <el-pagination v-model:current-page="state.qry.pageIndex"
                           v-model:page-size="state.qry.pageSize"
                           :page-sizes="[20, 50, 100,500]"
                           layout="total, sizes, prev, pager, next, jumper"
                           :total="state.qry.totalCount"
                           v-on:size-change="handleSizeChange"
                           v-on:current-change="handleCurrentChange" style="float:right;"></el-pagination>

        </div>
    </el-main>
</el-container>

<!-- 新增弹窗 -->
  <el-dialog v-model="dialog.openAddDialog"  :title="dialog.title"  close="dialog.openAddDialog=false" :close-on-click-modal="false" draggable width="600px">
    <el-form :model="dialog.formData"  label-width="auto" :rules="FormDataRules" ref="FormDataRef">
      <el-form-item label="公司名称" required  prop="name">
        <el-input v-model="dialog.formData.name" autocomplete="off" clearable placeholder="请输入公司名称" maxlength="30"></el-input>
      </el-form-item>
      <el-form-item label="责任人" required  prop="responsible">
        <el-input v-model="dialog.formData.responsible" autocomplete="off" clearable placeholder="请输入责任人" maxlength="8"></el-input>
      </el-form-item>
       <el-form-item label="联系电话" required  prop="contactPhone">
        <el-input v-model="dialog.formData.contactPhone" autocomplete="off"  clearable placeholder="请输入联系电话" maxlength="15"></el-input>
      </el-form-item>
       <el-form-item label="邮箱"  prop="email">
        <el-input v-model="dialog.formData.email" autocomplete="off"  clearable placeholder="邮箱" maxlength="30"></el-input>
      </el-form-item>

        <el-form-item label="公司地址" label-width="auto"  prop="companyAddr">
        <el-input v-model="dialog.formData.companyAddr" autocomplete="off"  clearable placeholder="公司地址" maxlength="80"></el-input>
      </el-form-item>
      <el-form-item label="是否渠道管理" label-width="auto"  >
          <el-switch v-model="dialog.formData.isChannelManage" inline-prompt active-text="是" inactive-text="否" />
      </el-form-item>
       <el-form-item label="是否启用" label-width="auto">
        <el-switch v-model="dialog.formData.status" inline-prompt active-text="是" inactive-text="否"/>
      </el-form-item>
    </el-form>
    <template #footer>
      <div class="dialog-footer">
        <el-button type="primary" v-on:click="save" >保存 </el-button>
      </div>
    </template>
  </el-dialog>


  @await Html.PartialAsync("~/Views/Company/Pop/_AssignChannel.cshtml")

@section scripts {
    <script type="text/javascript">
        const app = Vue.createApp({
        setup() {
            const state = Vue.reactive({
                dataLoading: false,
                qry: {
                    name: null,
                    responsible: null,
                    status: null,
                    pageIndex: 1,
                    pageSize: 50,
                    totalCount: 0,
                },
                dataList: []
               
            });
            const id = Vue.ref(null);
            const FormDataRef = Vue.ref(null);
            const initDataForm = () => ({
                    name: '',
                    responsible: "",
                    contactPhone:"",
                    email: "",
                    companyAddr: "",
                    isChannelManage: false,
                    status: true
                    });

            const dialog = Vue.reactive({
                    title: '新增',
                    openAddDialog: false,
                    formData: {...initDataForm()}
                });

           Vue.onMounted(() => { loadData()  });

            const loadData = () => {
                state.dataLoading = true;
                axios.post(`/Company/PageList`, {...state.qry}).then(response => {
                    let {data,status}=response;
                    alert("ccx1111111111111111111");
                    Object.assign(state,
                                {dataList:data.data.list,
                            qry:{
                                    pageIndex:data.data.pageIndex,
                                    pageSize:data.data.pageSize,
                                    totalCount:data.data.total,
                                    name:state.qry.name,
                                    responsible:state.qry.responsible,
                                    status:state.qry.status
                                }
                    });
                })
                state.dataLoading = false;
                };
            const handleSizeChange = (val) => {
                    state.qry.pageIndex = 1;
                    state.qry.pageSize = val;
                    loadData();
                        };
            const handleCurrentChange = (val) => {
                        state.qry.pageIndex = val;
                        loadData();
                    };
            const addDialog = () => {
                    dialog.title = "新增公司";
                    dialog.openAddDialog = true;
                    FormDataRef.value?.resetFields(); 
                    Object.assign(dialog.formData, initDataForm());
                    id.value = null;
                };


            const deleteItem =  (id) => {

              ElMessageBox.confirm('您确定删除吗?', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning', })
              .then(() => {
                    state.dataLoading = true;
                     axios.delete(`/Company/${id}/delete`)
                    .then(response => {
                        let {data,status}=response;
                        if (status == 200&&data.isSuccess ){
                            ElMessage({ message: `删除成功!`,  type: `success` });
                             loadData();
                            return;
                        }
					    ElMessage.error(data.message);
                    })
                    state.dataLoading = false;
                    })
                    .catch(() => { console.log('取消删除'); });
              }
           
            const FormDataRules = {
                    name: [{ required: true, message: '公司名称必填!', trigger: 'blur' }],
                    responsible: [{ required: true, message: '责任人必填!', trigger: 'blur' }],
                    contactPhone: [{ required: true, message: '联系电话必填!', trigger: 'blur' },
                    { pattern: /^1[3456789]\d{9}$/, message: '手机号码格式不正确', trigger: 'blur' }
                    ],
                   email: [
                        { required: false }, 
                        { 
                            pattern: /^[a-zA-Z0-9_-]+@@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/, 
                            message: '邮箱格式不正确', 
                            trigger: 'blur',
                            validator: (rule, value, callback) => {
                                if (!value || value.trim()  === '') callback();
                                else rule.pattern.test(value)  ? callback() : callback(new Error(rule.message)); 
                            }
                        }
                    ]

                };
                
            //保存
            const save = async () => {
                let isValid = await FormDataRef.value.validate(); 
                if(!isValid) return ElMessage({ message: "请完善表单信息!", type: "error" });
                let requestData = { ...dialog.formData, 
                          status: dialog.formData.status  ? 1 : 0,
                          isChannelManage: dialog.formData.isChannelManage  ? 1 : 0  };
 
                 let url = id.value  ? `/Company/${id.value}/update`  : '/Company/create';
                 let method = id.value  ? 'put' : 'post';
                 let response = await axios[method](url, requestData);
                    if (response.status  === 200) {
                          ElMessage({ message: "保存成功!", type: "success" });
                          dialog.openAddDialog  = false;
                          loadData();
                        }
                    }

                const edit=(row)=>{
                    dialog.title = `编辑【${row.name}】`;
                    dialog.openAddDialog = true;
                    FormDataRef.value?.resetFields();  
                    Object.assign(dialog.formData, initDataForm());
                    axios.get(`/Company/${row.id}/details`).then(response => {
                          if(response.status == 200)
                          {
                              dialog.formData={...response.data.data,
                              status: response.data.data.status==1?true:false,
                              isChannelManage: response.data.data.isChannelManage==1?true:false
                              };
                              id.value = row.id;
                          }
                      });
                }
                //重置查询表单
                const resetQueryForm=()=>{
                 state.qry  = {...state.qry,  
                                name: null,
                                status: null,
                                responsible: null 
                              };
                };

                const add = () => {

                    layui.use(function () {
                        var layer = layui.layer;
                        layer.open({
                            type: 2,
                            area: ['90%', '90%'],
                            title: " 房型 Mapping 供应商酒店房型",
                            fix: true,
                            maxmin: true,
                            shadeClose: true,
                            content: `Company/AssignChannel`
                        });
                    });

               
                
                }

            return {state,dialog,loadData,handleSizeChange,handleCurrentChange, addDialog,deleteItem,FormDataRules,
                    FormDataRef, save, edit, resetQueryForm, add
                };
                }
            });
            app.use(ElementPlus,{ locale: ElementPlusLocaleZhCn });
            app.mount('#app');
    </script>

}